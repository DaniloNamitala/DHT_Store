import { Center, Flex, useDisclosure } from "@chakra-ui/react";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { AppBar } from "../components/AppBar";
import { CardProduct } from "../components/Product/CardProduct";
import { CardPurchase } from "../components/Purchase/CardPurchase";
import headers from "../utils/headers";

export default function Home() {
  const { isOpen, onOpen, onClose } = useDisclosure();
  const [isAdmin, setAdmin] = useState(null);
  const [product, setProduct] = useState(null);
  const [current, setCurrent] = useState("menu");
  const [typeList, setList] = useState("listProducts");
  const [list, setListt] = useState([]);

  const router = useRouter();
  const { user, admin } = router.query;

  useEffect(() => {
    if (user !== undefined && !user)
      window.location.href = "http://localhost:3000";

    if (isAdmin !== Boolean(+admin)) setAdmin(Boolean(+admin));

    if (!isOpen) setCurrent("menu");
  }, [user, admin, isOpen]);

  useEffect(() => {
    if (typeList === "listPurchases") {
      const getPurchasesList = async () => {
        const response = await fetch("http://localhost:3001/listarCompra", {
          method: "POST",
          headers,
        });

        const result = await response.json();
        setListt(result);
      };

      getPurchasesList().catch(console.error);
    } else {
      const getProductsList = async () => {
        const response = await fetch("http://localhost:3001/getProductsList", {
          method: "GET",
          headers,
        });

        const result = await response.json();
        setListt(result);
      };

      getProductsList().catch(console.error);
    }
  }, [typeList]);

  const listCardsProduct = () =>
    list.map((product) => {
      const productObject = {
        id: product.id,
        title: product.nome,
        description: product.descricao,
        price: product.preco,
        qty: product.quantidade,
      };
      return (
        <CardProduct
          isAdmin={isAdmin}
          key={product.id}
          id={product.id}
          product={productObject}
          setCurrent={setCurrent}
          setProduct={setProduct}
          onOpen={onOpen}
        />
      );
    });

  const listCardsPurchase = () =>
    list.map((purchase) => {
      const purchaseObject = {
        id: purchase.id,
        title: purchase.idProduto,
        cpfCliente: purchase.cpfCliente,
        endereco: purchase.endereco,
        cep: purchase.cep,
        cidade: purchase.cidade,
        price: purchase.precoProduto,
      };
      return (
        <CardPurchase
          isAdmin={isAdmin}
          key={purchase.id}
          id={purchase.id}
          product={purchaseObject}
          setCurrent={setCurrent}
          setProduct={setProduct}
          onOpen={onOpen}
        />
      );
    });

  return (
    <>
      <Head>
        <title>DHT Store</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex flexDirection="column">
        <AppBar
          current={current}
          product={product}
          isOpen={isOpen}
          onClose={onClose}
          onOpen={onOpen}
          setCurrent={setCurrent}
          setList={setList}
          isAdmin={isAdmin}
        ></AppBar>
        <Center>
          <Flex width="70%" mt={"2rem"} flexWrap="wrap">
            {typeList === "listProducts"
              ? listCardsProduct()
              : listCardsPurchase()}
          </Flex>
        </Center>
      </Flex>
    </>
  );
}
